 use std::collections::HashMap;

#[derive(Debug)]
enum TokenType {
    // Misc
    ILLEGAL,
    EOF,

    // Identifier and literal
    IDENT,
    INT,

    // Operators
    ASSIGN,
    PLUS,
    MINUS,
    BANG,
    ASTERISK,
    SLASH,
    LT,
    GT,
    EQ,
    NOT_EQ,

    // Delims
    COMMA,
    SEMICOLON,

    // Keywords
    FUNCTION,
    LET,
    TRUE,
    FALSE,
    IF,
    ELSE,
    RETURN,
}

#[derive(Debug)]
pub struct Token {
    Type: TokenType,
    Literal: String,
}

let Keywords: HashMap<&str, TokenType> =
    [("fn", FUNCTION),
     ("let", LET),
     ("true", TRUE),
     ("false", FALSE),
     ("if", IF),
     ("else", ELSE),
     ("return",RETURN)]
    .iter().cloned().collect();

pub fn LookupIdent(ident: &str) -> TokenType{
    match Keywords.get(ident) {
        Some(tokenType) => tokenType,
        None => IDENT,
    }
}
